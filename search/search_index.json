{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"CSV Table Schema is a pragmatic approach for defining CSV schemas. CSV Table Schema provides a CSV schema description via JSON. Main features: Easy schema definiton via JSON which can be validated against the CSV Table Meta Schema . Dedicated to the CSV format. Supports the following data types: string, enum, enum-set, bool, int, float, date, time, date-time, json and xml. Supports CSV tables with ordered and unordered columns. Supports CSV tables with or without header row. Supports CSV dictionaries with key/value rows. Examples The following examples are available: Sample 01a: List of Students Sample 01b: List of Courses Sample 01c: List of Subjects Sample 02: Configuration Why yet another CSV schema definition? Unlike JSON or XML there is no well established schema definition language for CSV. But we are of course not the first ones with a proposal: The CSV Schema Language is a language for defining and validating CSV data. It uses its own domain language for describing the schema. The Table Schema is a format to declare a schema for tabular data (CSV is just one example). The schema is designed to be expressible in JSON. Both approaches are well thought but sadly didn't suit our needs. CSV Table Schema is an alternative schema description which is heavily inspired by both existing schema languages. What's missing? A data schema has two purposes: Semantical documentation of the data structure The possibility to validate real data against the data schema. The documentation part is done. What's still missing is a reference validator.","title":"Introduction"},{"location":"#examples","text":"The following examples are available: Sample 01a: List of Students Sample 01b: List of Courses Sample 01c: List of Subjects Sample 02: Configuration","title":"Examples"},{"location":"#why-yet-another-csv-schema-definition","text":"Unlike JSON or XML there is no well established schema definition language for CSV. But we are of course not the first ones with a proposal: The CSV Schema Language is a language for defining and validating CSV data. It uses its own domain language for describing the schema. The Table Schema is a format to declare a schema for tabular data (CSV is just one example). The schema is designed to be expressible in JSON. Both approaches are well thought but sadly didn't suit our needs. CSV Table Schema is an alternative schema description which is heavily inspired by both existing schema languages.","title":"Why yet another CSV schema definition?"},{"location":"#whats-missing","text":"A data schema has two purposes: Semantical documentation of the data structure The possibility to validate real data against the data schema. The documentation part is done. What's still missing is a reference validator.","title":"What's missing?"},{"location":"specification/","text":"A CSV Table Schema document is a JSON document which can be validated against the CSV Table Meta Schema . It consists of a JSON object with following properties: title : A title for the CSV Schema. This property is required . description : An optional description for the CSV Schema. Two mutually exclusive properties. One of them is is required . table : A table object. dictionary : A dictionary object. Tables A CSV table is a text file. Each line of the file is a data record. Each record consists of one or more fields, separated by a delimiter. Every record has the same sequence of fields. The first line of a CSV table can be defined as header row, representing the names of the columns. Table A table is a JSON object with following properties: name : Defines the name of the CSV table. This property is required . description : An optional description of the table. type : Specifies the table type. This property is required . Possible values are: ordered : A table with columns appearing in defined order. unordered : A table with columns appearing in any order. headless : A table with no header row. Columns must appear in defined order. delimiterChar : Defines the delimiter character of the CSV format. Default value is , . quoteChar : Defines the quote character of the CSV format. Default value is \" . additionalColumns : If true additional non-specified columns within the CSV document are allowed. Default value is false . columns : An array of column definitions. This property is required . Columns The columns array describes all columns within a CSV table. A column is a JSON object with following properties: name : The name of the column. This property is required . description : An optional description of the column. type : The data type of the column. This property is required . Possible values are: string int float bool enum enum-set time date date-time json xml optional : If true the column must not be present in the CSV table. Default value is false . nullable : If true values of this column can be empty. Default value is false . pattern : An optional regular expression which must always match with values of the column. About optional columns If the table type is: ordered , a column with optional=true marks an optional column. If the column is missing in the table all other columns must still apear in defined order. headless , a column with optional=true marks the start of the optional column range. If the column is missing in the table all columns after this column are of course also missing. Dictionaries A CSV dictionary is a collection of key/value pairs. It is a CSV table with exactly two columns, a key column and a value column. While the key column is always a string containing the key name, the value column can have different data types for each key. Dictionary A dictionary is a JSON object with following properties: name : Defines the name of the CSV dictionary. This property is required . description : An optional description of the dictionary. delimiterChar : Defines the delimiter character of the CSV format. Default value is , . quoteChar : Defines the quote character of the CSV format. Default value is \" . keys : An array of key definitions. This property is required . Keys The keys array describes all keys within a CSV dictionary. A key is a JSON object with following properties: name : The name of the key. This property is required . description : An optional description of the key. type : The data type of the key. This property is required . Possible values are: string int float bool enum enum-set time date date-time json xml optional : If true the key must not be present in the CSV dictionary. Default value is false . nullable : If true the value of this key can be empty. Default value is false . pattern : An optional regular expression which must always match with the value of the key. Data types A data type defines the type of value which is expected in a column or key. Based on the data type additional schema properties are available: string Represents a text string. The following additional schema properties are available: format : Specifies the expected format of a string value. Possible values are: none : Any string value. This is the default value. uuid : An uuid acccording to rfc4122 . uri : An uri acccording to rfc3986 . email : An email address acccording to rfc5322, section 3.4.1 . base64 : A base64 encoded string acccording to rfc4648 . minLength : Specifies the minimum character length of a string value. maxLength : Specifies the maximun character length of a string value. int Represents an integral number. The following additional schema properties are available: minValue : Specifies the minimum allowed value. maxValue : Specifies the maximun allowed value. float Represents a floating number. The following additional schema properties are available: formats : An array of valid format string according to .NET Custom numeric format strings . This property is required . minValue : Specifies the minimum allowed value. maxValue : Specifies the maximun allowed value. bool Represents a boolean value. The following additional schema properties are available: trueValues : An array of valid strings each representing a logical true value. This property is required . falseValues : An array of valid strings each representing a logical false value. This property is required . enum Represents an enumeration value. The following additional schema properties are available: members : An array of value objects each representing one enumeration value. This property is required . enum-set Represents an set of enumeration values formatted as csv string. The following additional schema properties are available: members : An array of value objects each repesenting one enumeration value. This property is required . delimiterChar : Defines the delimiter character of the CSV string format. Default value is , . quoteChar : Defines the quote character of the CSV string format. Default value is \" . date-time Represents a datetime value. The following additional schema properties are available: formats : An array of valid format strings according to .NET Custom date and time format strings . This property is required . minValue : Specifies the minimum allowed value. maxValue : Specifies the maximun allowed value. date Represents a date only value. The following additional schema properties are available: formats : An array of valid format strings according to .NET Custom date and time format strings . This property is required . minValue : Specifies the minimum allowed value. maxValue : Specifies the maximun allowed value. time Represents a time only value. The following additional schema properties are available: formats : An array of valid format strings according to .NET Custom date and time format strings . This property is required . minValue : Specifies the minimum allowed value. maxValue : Specifies the maximun allowed value. json Represents a json formatted string. The following additional schema properties are available: schema : Specifies a JSON Schema . This property is required . uri : An uri to a valid JSON Schema. This property is required . xml Represents a xml formatted string. The following additional schema properties are available: schema : Specifies a XML Schema . This property is required . uri : An uri to a valid XML Schema. This property is required .","title":"Specification"},{"location":"specification/#tables","text":"A CSV table is a text file. Each line of the file is a data record. Each record consists of one or more fields, separated by a delimiter. Every record has the same sequence of fields. The first line of a CSV table can be defined as header row, representing the names of the columns.","title":"Tables"},{"location":"specification/#table","text":"A table is a JSON object with following properties: name : Defines the name of the CSV table. This property is required . description : An optional description of the table. type : Specifies the table type. This property is required . Possible values are: ordered : A table with columns appearing in defined order. unordered : A table with columns appearing in any order. headless : A table with no header row. Columns must appear in defined order. delimiterChar : Defines the delimiter character of the CSV format. Default value is , . quoteChar : Defines the quote character of the CSV format. Default value is \" . additionalColumns : If true additional non-specified columns within the CSV document are allowed. Default value is false . columns : An array of column definitions. This property is required .","title":"Table"},{"location":"specification/#columns","text":"The columns array describes all columns within a CSV table. A column is a JSON object with following properties: name : The name of the column. This property is required . description : An optional description of the column. type : The data type of the column. This property is required . Possible values are: string int float bool enum enum-set time date date-time json xml optional : If true the column must not be present in the CSV table. Default value is false . nullable : If true values of this column can be empty. Default value is false . pattern : An optional regular expression which must always match with values of the column.","title":"Columns"},{"location":"specification/#about-optional-columns","text":"If the table type is: ordered , a column with optional=true marks an optional column. If the column is missing in the table all other columns must still apear in defined order. headless , a column with optional=true marks the start of the optional column range. If the column is missing in the table all columns after this column are of course also missing.","title":"About optional columns"},{"location":"specification/#dictionaries","text":"A CSV dictionary is a collection of key/value pairs. It is a CSV table with exactly two columns, a key column and a value column. While the key column is always a string containing the key name, the value column can have different data types for each key.","title":"Dictionaries"},{"location":"specification/#dictionary","text":"A dictionary is a JSON object with following properties: name : Defines the name of the CSV dictionary. This property is required . description : An optional description of the dictionary. delimiterChar : Defines the delimiter character of the CSV format. Default value is , . quoteChar : Defines the quote character of the CSV format. Default value is \" . keys : An array of key definitions. This property is required .","title":"Dictionary"},{"location":"specification/#keys","text":"The keys array describes all keys within a CSV dictionary. A key is a JSON object with following properties: name : The name of the key. This property is required . description : An optional description of the key. type : The data type of the key. This property is required . Possible values are: string int float bool enum enum-set time date date-time json xml optional : If true the key must not be present in the CSV dictionary. Default value is false . nullable : If true the value of this key can be empty. Default value is false . pattern : An optional regular expression which must always match with the value of the key.","title":"Keys"},{"location":"specification/#data-types","text":"A data type defines the type of value which is expected in a column or key. Based on the data type additional schema properties are available:","title":"Data types"},{"location":"specification/#string","text":"Represents a text string. The following additional schema properties are available: format : Specifies the expected format of a string value. Possible values are: none : Any string value. This is the default value. uuid : An uuid acccording to rfc4122 . uri : An uri acccording to rfc3986 . email : An email address acccording to rfc5322, section 3.4.1 . base64 : A base64 encoded string acccording to rfc4648 . minLength : Specifies the minimum character length of a string value. maxLength : Specifies the maximun character length of a string value.","title":"string"},{"location":"specification/#int","text":"Represents an integral number. The following additional schema properties are available: minValue : Specifies the minimum allowed value. maxValue : Specifies the maximun allowed value.","title":"int"},{"location":"specification/#float","text":"Represents a floating number. The following additional schema properties are available: formats : An array of valid format string according to .NET Custom numeric format strings . This property is required . minValue : Specifies the minimum allowed value. maxValue : Specifies the maximun allowed value.","title":"float"},{"location":"specification/#bool","text":"Represents a boolean value. The following additional schema properties are available: trueValues : An array of valid strings each representing a logical true value. This property is required . falseValues : An array of valid strings each representing a logical false value. This property is required .","title":"bool"},{"location":"specification/#enum","text":"Represents an enumeration value. The following additional schema properties are available: members : An array of value objects each representing one enumeration value. This property is required .","title":"enum"},{"location":"specification/#enum-set","text":"Represents an set of enumeration values formatted as csv string. The following additional schema properties are available: members : An array of value objects each repesenting one enumeration value. This property is required . delimiterChar : Defines the delimiter character of the CSV string format. Default value is , . quoteChar : Defines the quote character of the CSV string format. Default value is \" .","title":"enum-set"},{"location":"specification/#date-time","text":"Represents a datetime value. The following additional schema properties are available: formats : An array of valid format strings according to .NET Custom date and time format strings . This property is required . minValue : Specifies the minimum allowed value. maxValue : Specifies the maximun allowed value.","title":"date-time"},{"location":"specification/#date","text":"Represents a date only value. The following additional schema properties are available: formats : An array of valid format strings according to .NET Custom date and time format strings . This property is required . minValue : Specifies the minimum allowed value. maxValue : Specifies the maximun allowed value.","title":"date"},{"location":"specification/#time","text":"Represents a time only value. The following additional schema properties are available: formats : An array of valid format strings according to .NET Custom date and time format strings . This property is required . minValue : Specifies the minimum allowed value. maxValue : Specifies the maximun allowed value.","title":"time"},{"location":"specification/#json","text":"Represents a json formatted string. The following additional schema properties are available: schema : Specifies a JSON Schema . This property is required . uri : An uri to a valid JSON Schema. This property is required .","title":"json"},{"location":"specification/#xml","text":"Represents a xml formatted string. The following additional schema properties are available: schema : Specifies a XML Schema . This property is required . uri : An uri to a valid XML Schema. This property is required .","title":"xml"}]}